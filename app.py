# -*- coding: utf-8 -*-
import os
from flask import Flask, render_template, request, make_response, url_for, redirect, flash, send_from_directory
import math
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import mpld3


#-----------------------------------TRIP GENERATION FUNCTION SECTION----------------------------------------

#Input the Trip Rate and Other Constant
veh_per_day = [['vehperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '35.910', '26.950', '28.590', '55.150', '49.940', '67.250', '50.940', '1.970', '78.450', '219.360', '0.540', '64.810', '0.580', '0.110', '0.340', '1.040', '0.200', '0.140', '0.200', '1.490', '12.680', '25.220', '6.950', '0.220', '0.290', '0.970', '0.170', '0.110', '91.090', '42.960', '112.140', '148.840', '0.110', '1.860', '0.080', '0.150', '5.940'], 
            ['2', '16.810', '28.800', '18.410', '75.720', '58.100', '62.900', '49.040', '1.970', '49.030', '264.100', '1.250', '133.610', '0.330', '0.100', '1.060', '2.210', '0.220', '0.260', '0.280', '0.000', '16.470', '34.570', '0.000', '0.000', '0.370', '0.170', '0.170', '0.110', '92.010', '49.590', '152.510', '98.740', '0.400', '0.000', '0.000', '0.100', '32.300'], 
            ['3', '37.500', '4.470', '28.280', '52.050', '49.640', '62.040', '41.910', '3.510', '79.110', '208.720', '0.680', '467.730', '0.270', '0.100', '0.410', '1.020', '0.190', '0.130', '0.000', '0.000', '0.000', '53.450', '0.000', '0.000', '0.250', '0.780', '0.140', '0.120', '78.550', '43.670', '58.880', '191.390', '0.470', '1.890', '0.000', '0.430', '4.810'], 
            ['4', '31.320', '28.430', '44.350', '62.840', '96.560', '67.910', '54.670', '3.518', '78.770', '241.950', '0.610', '99.180', '0.570', '0.220', '0.310', '0.610', '0.530', '0.110', '0.000', '0.000', '12.990', '28.360', '0.000', '0.000', '0.000', '2.270', '0.380', '0.220', '69.570', '43.050', '113.690', '131.700', '0.120', '0.000', '0.000', '0.000', '6.140'], 
            ['5', '15.960', '22.340', '14.710', '70.350', '0.000', '57.610', '57.810', '5.140', '305.120', '150.100', '0.620', '92.350', '0.240', '0.000', '0.290', '12.690', '0.220', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.030', '2.720', '0.330', '0.210', '0.000', '29.410', '126.290', '69.040', '0.100', '0.000', '0.000', '0.000', '9.150']]

trip_per_day = [['tripperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '1.256', '1.279', '1.280', '1.562', '1.587', '1.819', '1.829', '2.119', '1.857', '1.971', '1.636', '1.499', '1.639', '1.728', '1.617', '1.537', '1.360', '1.562', '1.611', '1.822', '1.607', '1.639', '1.451', '2.013', '2.265', '3.007', '1.593', '1.636', '1.554', '1.487', '1.643', '1.672', '1.459', '3.124', '3.677', '3.240', '1.478'], 
            ['2', '1.147', '1.253', '1.270', '1.303', '1.655', '1.603', '2.102', '2.243', '2.832', '2.438', '1.324', '1.347', '1.664', '1.814', '1.623', '1.620', '1.503', '1.498', '1.603', '0.000', '1.299', '1.783', '0.000', '0.000', '2.582', '1.721', '1.721', '1.324', '1.631', '1.621', '1.842', '1.871', '1.608', '0.000', '0.000', '1.676', '1.990'], 
            ['3', '1.299', '1.266', '1.266', '1.653', '1.570', '1.854', '2.069', '1.883', '1.913', '1.988', '1.290', '1.588', '1.665', '1.631', '1.598', '1.533', '1.311', '1.518', '0.000', '0.000', '0.000', '1.554', '0.000', '0.000', '1.847', '2.900', '1.428', '1.505', '1.466', '1.394', '1.707', '1.615', '1.416', '2.371', '0.000', '2.521', '1.041'], 
            ['4', '1.272', '1.326', '1.298', '1.397', '1.432', '2.319', '1.543', '1.843', '1.684', '1.697', '2.320', '1.358', '1.586', '1.735', '1.613', '1.648', '1.424', '1.375', '0.000', '0.000', '1.384', '1.337', '0.000', '0.000', '0.000', '1.578', '1.343', '1.454', '1.529', '1.561', '1.480', '1.629', '1.376', '0.000', '0.000', '0.000', '1.609'], 
            ['5', '1.272', '1.272', '1.298', '1.611', '0.000', '1.664', '1.999', '2.416', '1.784', '2.074', '1.588', '1.736', '1.751', '0.000', '1.677', '1.409', '1.304', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '1.685', '2.828', '2.273', '2.060', '0.000', '1.465', '1.565', '1.427', '1.778', '0.000', '0.000', '0.000', '1.595']]

pcu_per_day = [['pcuperday', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '0.682', '0.695', '0.637', '0.729', '0.711', '0.793', '0.946', '0.766', '0.802', '0.823', '0.769', '0.765', '0.805', '0.895', '0.824', '0.654', '0.724', '0.741', '0.669', '1.025', '0.777', '0.930', '1.295', '0.955', '0.812', '1.442', '0.712', '0.716', '0.649', '0.627', '0.788', '0.860', '0.799', '0.971', '0.791', '0.740', '0.721'], 
            ['2', '0.759', '0.777', '0.704', '0.931', '0.692', '0.950', '0.899', '0.710', '0.945', '1.078', '0.402', '0.635', '1.017', '1.113', '0.944', '0.904', '0.875', '0.805', '0.609', '0.000', '0.843', '0.841', '0.000', '0.000', '0.689', '0.489', '0.489', '0.504', '0.440', '0.966', '0.855', '0.908', '0.615', '0.000', '0.000', '0.963', '0.715'], 
            ['3', '0.718', '0.709', '0.639', '0.573', '0.688', '0.677', '0.743', '0.667', '0.666', '0.726', '0.800', '0.642', '0.748', '0.831', '0.855', '0.658', '0.676', '0.612', '0.000', '0.000', '0.000', '1.113', '0.000', '0.000', '0.865', '1.646', '0.739', '0.582', '0.715', '0.636', '0.619', '0.804', '0.791', '0.971', '0.000', '0.904', '0.786'], 
            ['4', '0.697', '0.716', '0.668', '0.822', '0.822', '0.892', '1.147', '0.974', '0.853', '0.871', '0.826', '0.848', '0.657', '0.704', '0.695', '0.646', '0.739', '0.955', '0.000', '0.000', '0.795', '1.033', '0.000', '0.000', '0.000', '1.025', '0.694', '0.745', '0.554', '0.591', '0.845', '0.893', '0.854', '0.000', '0.000', '0.000', '0.668'], 
            ['5', '0.624', '0.655', '0.590', '0.826', '0.000', '0.815', '0.902', '0.805', '0.879', '0.856', '0.806', '0.855', '0.649', '0.000', '0.838', '0.615', '0.703', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.881', '0.827', '0.832', '0.806', '0.000', '0.526', '0.874', '0.891', '0.822', '0.000', '0.000', '0.000', '0.678']]

allday_in = [['AllDayin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '44.00', '45.00', '44.50', '45.50', '44.50', '52.00', '53.50', '51.00', '39.50', '26.50', '52.00', '50.00', '49.00', '62.00', '55.00', '50.00', '48.00', '52.00', '42.00', '64.00', '52.50', '46.50', '48.50', '54.00', '50.50', '54.00', '54.50', '55.50', '57.50', '53.50', '61.00', '57.00', '50.50', '45.50', '50.50', '51.00', '51.00'], 
            ['2', '47.50', '49.00', '49.50', '35.50', '40.00', '38.00', '51.50', '55.00', '44.50', '29.50', '52.00', '58.50', '49.50', '69.50', '60.00', '51.00', '52.50', '73.00', '41.00', '0.00', '47.50', '46.00', '0.00', '0.00', '43.00', '40.00', '40.00', '53.00', '53.00', '42.50', '56.00', '58.00', '46.00', '0.00', '0.00', '58.00', '54.00'], 
            ['3', '44.50', '48.50', '52.50', '47.00', '47.50', '50.50', '52.50', '57.00', '41.00', '25.00', '49.50', '50.00', '46.00', '58.00', '56.50', '49.00', '48.50', '52.00', '0.00', '0.00', '0.00', '47.00', '0.00', '0.00', '54.50', '55.50', '65.50', '60.50', '58.00', '52.00', '62.50', '58.00', '44.50', '53.50', '0.00', '55.00', '51.50'], 
            ['4', '39.00', '45.50', '39.50', '43.00', '42.00', '48.50', '55.50', '49.50', '36.00', '26.50', '52.00', '49.50', '49.50', '59.00', '50.00', '49.00', '45.50', '55.00', '0.00', '0.00', '55.00', '47.50', '0.00', '0.00', '0.00', '48.00', '56.00', '51.00', '61.00', '56.00', '65.50', '55.00', '55.00', '0.00', '0.00', '0.00', '58.00'], 
            ['5', '48.00', '42.50', '44.50', '46.00', '0.00', '46.50', '52.00', '48.00', '40.50', '29.00', '55.00', '48.00', '50.50', '0.00', '58.50', '52.00', '45.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '50.50', '48.00', '52.50', '0.00', '55.50', '57.50', '56.00', '52.50', '0.00', '0.00', '0.00', '57.00']]

allday_out = [['AllDayout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '56.00', '55.00', '55.50', '54.50', '55.50', '48.00', '46.50', '49.00', '60.50', '73.50', '48.00', '50.00', '51.00', '38.00', '45.00', '50.00', '52.00', '48.00', '58.00', '36.00', '47.50', '53.50', '51.50', '46.00', '49.50', '46.00', '45.50', '44.50', '42.50', '46.50', '39.00', '43.00', '49.50', '54.50', '49.50', '49.00', '49.00'], 
            ['2', '52.50', '51.00', '50.50', '64.50', '60.00', '62.00', '48.50', '45.00', '55.50', '70.50', '48.00', '41.50', '50.50', '30.50', '40.00', '49.00', '47.50', '27.00', '59.00', '100.00', '52.50', '54.00', '0.00', '0.00', '57.00', '60.00', '60.00', '47.00', '47.00', '57.50', '44.00', '42.00', '54.00', '0.00', '0.00', '42.00', '46.00'], 
            ['3', '55.50', '51.50', '47.50', '53.00', '52.50', '49.50', '47.50', '43.00', '59.00', '75.00', '50.50', '50.00', '54.00', '42.00', '43.50', '51.00', '51.50', '48.00', '0.00', '0.00', '0.00', '53.00', '0.00', '0.00', '45.50', '44.50', '34.50', '39.50', '42.00', '48.00', '37.50', '42.00', '55.50', '46.50', '0.00', '45.00', '48.50'], 
            ['4', '61.00', '54.50', '60.50', '57.00', '58.00', '51.50', '44.50', '50.50', '64.00', '73.50', '48.00', '50.50', '50.50', '41.00', '50.00', '51.00', '54.50', '45.00', '0.00', '0.00', '45.00', '52.50', '0.00', '0.00', '0.00', '52.00', '44.00', '49.00', '39.00', '44.00', '34.50', '45.00', '45.00', '0.00', '0.00', '0.00', '42.00'], 
            ['5', '52.00', '57.50', '55.50', '54.00', '0.00', '53.50', '48.00', '52.00', '59.50', '71.00', '45.00', '52.00', '49.50', '100.00', '41.50', '48.00', '55.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '49.50', '52.00', '47.50', '0.00', '44.50', '42.50', '44.00', '47.50', '0.00', '0.00', '0.00', '43.00']]

am_peak = [['Ampeak', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '19.24', '18.40', '18.48', '8.81', '7.10', '7.61', '7.18', '8.34', '0.00', '0.00', '8.24', '10.58', '6.72', '2.92', '5.12', '7.38', '13.38', '15.24', '11.71', '8.16', '11.55', '9.70', '8.01', '6.47', '7.65', '7.02', '29.02', '26.01', '12.34', '14.88', '8.77', '7.97', '14.49', '8.72', '5.11', '6.67', '6.31'], 
            ['2', '22.56', '32.24', '24.07', '7.46', '4.52', '6.02', '6.73', '14.55', '0.00', '0.00', '7.21', '6.52', '5.46', '4.31', '4.65', '6.05', '12.20', '12.35', '11.80', '0.00', '18.34', '9.59', '0.00', '0.00', '6.90', '25.63', '25.63', '25.54', '13.18', '14.22', '12.76', '7.74', '13.50', '0.00', '0.00', '13.84', '9.43'], 
            ['3', '21.32', '17.38', '18.63', '8.20', '6.92', '7.76', '7.19', '6.70', '0.00', '0.00', '7.79', '9.45', '5.05', '2.86', '4.57', '6.24', '12.46', '17.62', '0.00', '0.00', '0.00', '9.08', '0.00', '0.00', '7.30', '7.60', '28.11', '25.06', '11.76', '16.70', '9.22', '8.22', '13.77', '7.83', '0.00', '6.16', '6.05'], 
            ['4', '17.05', '19.46', '16.19', '8.97', '9.46', '7.90', '6.83', '9.25', '0.00', '0.00', '8.38', '9.66', '7.83', '1.44', '5.13', '8.26', '13.85', '14.30', '0.00', '0.00', '15.66', '10.34', '0.00', '0.00', '0.00', '8.33', '30.92', '24.03', '12.69', '10.74', '5.58', '7.64', '15.14', '0.00', '0.00', '0.00', '4.05'], 
            ['5', '19.95', '15.53', '20.43', '11.89', '0.00', '9.47', '9.24', '8.72', '0.00', '0.00', '9.44', '12.86', '10.32', '0.00', '7.55', '9.19', '13.98', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '5.13', '8.27', '30.43', '35.40', '0.00', '17.60', '9.51', '9.87', '15.53', '0.00', '0.00', '0.00', '12.63']]

am_peak_in = [['Ampeakin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '12.00', '13.00', '13.00', '29.00', '31.00', '51.00', '56.00', '53.00', '0.00', '0.00', '52.00', '56.00', '50.00', '71.00', '64.00', '51.00', '56.00', '85.00', '71.00', '80.00', '84.00', '62.00', '50.00', '56.00', '50.00', '54.00', '66.00', '78.00', '78.00', '86.00', '66.00', '65.00', '68.00', '81.00', '53.00', '55.00', '52.00'], 
            ['2', '5.00', '3.00', '8.00', '9.00', '19.00', '15.00', '55.00', '39.00', '0.00', '0.00', '54.00', '72.00', '51.00', '78.00', '66.00', '49.00', '65.00', '80.00', '69.00', '0.00', '83.00', '61.00', '0.00', '0.00', '33.00', '69.00', '69.00', '77.00', '72.00', '64.00', '64.00', '68.00', '76.00', '0.00', '0.00', '68.00', '39.00'], 
            ['3', '10.00', '25.00', '23.00', '32.00', '41.00', '54.00', '47.00', '63.00', '0.00', '0.00', '50.00', '57.00', '44.00', '67.00', '64.00', '51.00', '55.00', '88.00', '0.00', '0.00', '0.00', '57.00', '0.00', '0.00', '56.00', '59.00', '73.00', '77.00', '78.00', '86.00', '68.00', '66.00', '57.00', '75.00', '0.00', '57.00', '58.00'], 
            ['4', '11.00', '15.00', '12.00', '25.00', '22.00', '39.00', '59.00', '51.00', '0.00', '0.00', '52.00', '55.00', '50.00', '66.00', '60.00', '50.00', '58.00', '84.00', '0.00', '0.00', '86.00', '66.00', '0.00', '0.00', '0.00', '50.00', '71.00', '77.00', '83.00', '88.00', '67.00', '61.00', '75.00', '0.00', '0.00', '0.00', '68.00'], 
            ['5', '15.00', '7.00', '9.00', '28.00', '0.00', '51.00', '59.00', '51.00', '0.00', '0.00', '54.00', '53.00', '53.00', '0.00', '71.00', '53.00', '53.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '50.00', '52.00', '73.00', '0.00', '91.00', '70.00', '65.00', '62.00', '0.00', '0.00', '0.00', '25.00']]

am_peak_out = [['Ampeakout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '88.00', '87.00', '87.00', '71.00', '69.00', '49.00', '44.00', '47.00', '0.00', '0.00', '48.00', '44.00', '50.00', '29.00', '36.00', '49.00', '44.00', '15.00', '29.00', '20.00', '16.00', '38.00', '50.00', '44.00', '50.00', '46.00', '34.00', '22.00', '22.00', '14.00', '34.00', '35.00', '32.00', '19.00', '47.00', '45.00', '48.00'], 
            ['2', '95.00', '97.00', '92.00', '91.00', '81.00', '85.00', '45.00', '61.00', '0.00', '0.00', '46.00', '28.00', '49.00', '22.00', '34.00', '51.00', '35.00', '20.00', '31.00', '0.00', '17.00', '39.00', '0.00', '0.00', '67.00', '31.00', '31.00', '23.00', '28.00', '36.00', '36.00', '32.00', '24.00', '0.00', '0.00', '32.00', '61.00'], 
            ['3', '90.00', '75.00', '77.00', '68.00', '59.00', '46.00', '53.00', '37.00', '0.00', '0.00', '50.00', '43.00', '56.00', '33.00', '36.00', '49.00', '45.00', '12.00', '0.00', '0.00', '0.00', '43.00', '0.00', '0.00', '44.00', '41.00', '27.00', '23.00', '22.00', '14.00', '32.00', '34.00', '43.00', '25.00', '0.00', '43.00', '42.00'], 
            ['4', '89.00', '85.00', '88.00', '75.00', '78.00', '61.00', '41.00', '49.00', '0.00', '0.00', '48.00', '45.00', '50.00', '34.00', '40.00', '50.00', '42.00', '35.00', '0.00', '0.00', '14.00', '34.00', '0.00', '0.00', '0.00', '50.00', '29.00', '23.00', '17.00', '12.00', '33.00', '39.00', '25.00', '0.00', '0.00', '0.00', '32.00'], 
            ['5', '85.00', '93.00', '91.00', '72.00', '0.00', '49.00', '41.00', '49.00', '0.00', '0.00', '46.00', '47.00', '47.00', '0.00', '29.00', '47.00', '47.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '50.00', '48.00', '27.00', '0.00', '9.00', '30.00', '35.00', '38.00', '0.00', '0.00', '0.00', '75.00']]

pm_peak = [['Pmpeak', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '18.33', '19.34', '16.75', '8.67', '8.55', '8.96', '8.63', '8.40', '9.26', '11.09', '8.28', '8.28', '9.57', '9.81', '9.84', '8.28', '2.27', '9.66', '9.27', '10.39', '13.11', '7.70', '7.08', '7.62', '7.76', '8.26', '15.28', '11.50', '8.04', '7.13', '6.16', '7.03', '5.33', '8.14', '8.60', '10.35', '14.94'], 
            ['2', '13.85', '21.86', '14.20', '13.82', '10.97', '9.35', '6.69', '9.86', '12.46', '10.40', '6.67', '9.30', '6.31', '9.61', '9.35', '7.63', '2.04', '5.54', '9.12', '0.00', '16.20', '6.85', '0.00', '0.00', '5.50', '9.84', '9.84', '11.06', '7.52', '5.59', '5.01', '6.24', '5.01', '0.00', '0.00', '10.46', '11.28'], 
            ['3', '21.19', '16.64', '16.64', '6.73', '7.45', '8.54', '7.99', '6.40', '11.23', '11.91', '8.59', '7.40', '13.23', '9.51', '10.01', '8.82', '2.29', '12.92', '0.00', '0.00', '0.00', '6.39', '0.00', '0.00', '10.82', '7.34', '19.67', '16.44', '8.74', '6.49', '7.94', '7.03', '5.72', '8.99', '0.00', '11.85', '16.15'], 
            ['4', '18.19', '19.56', '16.46', '11.52', '11.31', '11.07', '10.73', '12.04', '7.98', '9.05', '9.12', '8.09', '11.62', '10.50', '10.12', '8.27', '2.19', '9.98', '0.00', '0.00', '17.33', '10.63', '0.00', '0.00', '0.00', '8.17', '15.75', '10.61', '7.54', '7.92', '5.93', '7.71', '4.53', '0.00', '0.00', '0.00', '16.87'], 
            ['5', '17.41', '20.42', '17.78', '10.49', '0.00', '10.45', '8.16', '8.82', '8.26', '12.40', '8.18', '8.32', '6.49', '0.00', '9.31', '7.68', '2.53', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '10.26', '10.40', '14.78', '11.05', '0.00', '7.49', '6.83', '7.10', '6.59', '0.00', '0.00', '0.00', '4.21']]

pm_peak_in = [['Pmpeakin', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '76.00', '77.00', '76.00', '62.00', '58.00', '53.00', '51.00', '49.00', '79.00', '53.00', '52.00', '44.00', '48.00', '53.00', '46.00', '49.00', '40.00', '19.00', '13.00', '48.00', '21.00', '31.00', '47.00', '52.00', '51.00', '54.00', '43.00', '33.00', '37.00', '21.00', '56.00', '49.00', '33.00', '10.00', '48.00', '47.00', '50.00'], 
            ['2', '90.00', '95.00', '91.00', '62.00', '61.00', '61.00', '48.00', '71.00', '89.00', '59.00', '50.00', '45.00', '48.00', '61.00', '54.00', '53.00', '40.00', '66.00', '13.00', '0.00', '12.00', '31.00', '0.00', '0.00', '53.00', '11.00', '11.00', '29.00', '34.00', '21.00', '48.00', '48.00', '16.00', '0.00', '0.00', '48.00', '69.00'], 
            ['3', '79.00', '72.00', '82.00', '62.00', '54.00', '47.00', '58.00', '51.00', '82.00', '50.00', '49.00', '43.00', '48.00', '49.00', '49.00', '47.00', '42.00', '16.00', '0.00', '0.00', '0.00', '37.00', '0.00', '0.00', '53.00', '52.00', '58.00', '44.00', '38.00', '18.00', '57.00', '50.00', '32.00', '32.00', '0.00', '53.00', '45.00'], 
            ['4', '67.00', '76.00', '67.00', '61.00', '62.00', '58.00', '52.00', '48.00', '72.00', '53.00', '52.00', '44.00', '49.00', '52.00', '40.00', '48.00', '33.00', '26.00', '0.00', '0.00', '24.00', '29.00', '0.00', '0.00', '0.00', '46.00', '41.00', '25.00', '39.00', '24.00', '64.00', '49.00', '35.00', '0.00', '0.00', '0.00', '48.00'], 
            ['5', '81.00', '78.00', '80.00', '64.00', '0.00', '42.00', '45.00', '45.00', '81.00', '58.00', '56.00', '43.00', '48.00', '0.00', '46.00', '51.00', '37.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '75.00', '51.00', '44.00', '32.00', '0.00', '20.00', '45.00', '47.00', '43.00', '0.00', '0.00', '0.00', '89.00']]

pm_peak_out = [['Pmpeakout', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '24.00', '23.00', '24.00', '38.00', '42.00', '47.00', '49.00', '51.00', '21.00', '47.00', '48.00', '56.00', '52.00', '47.00', '54.00', '51.00', '60.00', '81.00', '87.00', '52.00', '79.00', '69.00', '53.00', '48.00', '49.00', '46.00', '57.00', '67.00', '63.00', '79.00', '44.00', '51.00', '67.00', '90.00', '52.00', '53.00', '50.00'], 
            ['2', '10.00', '5.00', '9.00', '38.00', '39.00', '39.00', '52.00', '29.00', '11.00', '41.00', '50.00', '55.00', '52.00', '39.00', '46.00', '47.00', '60.00', '34.00', '87.00', '0.00', '88.00', '69.00', '0.00', '0.00', '47.00', '89.00', '89.00', '71.00', '66.00', '79.00', '52.00', '52.00', '84.00', '0.00', '0.00', '52.00', '31.00'], 
            ['3', '21.00', '28.00', '18.00', '38.00', '46.00', '53.00', '42.00', '49.00', '18.00', '50.00', '51.00', '57.00', '52.00', '51.00', '51.00', '53.00', '58.00', '84.00', '0.00', '0.00', '0.00', '63.00', '0.00', '0.00', '47.00', '48.00', '42.00', '56.00', '62.00', '82.00', '43.00', '50.00', '68.00', '68.00', '0.00', '47.00', '55.00'], 
            ['4', '33.00', '24.00', '33.00', '39.00', '38.00', '42.00', '48.00', '52.00', '28.00', '47.00', '48.00', '56.00', '51.00', '48.00', '60.00', '52.00', '67.00', '74.00', '0.00', '0.00', '76.00', '71.00', '0.00', '0.00', '0.00', '54.00', '59.00', '75.00', '61.00', '76.00', '36.00', '51.00', '65.00', '0.00', '0.00', '0.00', '52.00'], 
            ['5', '19.00', '22.00', '20.00', '36.00', '0.00', '58.00', '55.00', '55.00', '19.00', '42.00', '44.00', '57.00', '52.00', '0.00', '57.00', '49.00', '63.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '25.00', '49.00', '56.00', '68.00', '0.00', '80.00', '55.00', '53.00', '57.00', '0.00', '0.00', '0.00', '11.00']]

veh_mode = [['Mode', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A11', 'A12', 'A13', 'A14', 'A15', 'A16', 'A17', 'A18', 'A19', 'A20', 'A21', 'A22', 'A23', 'A24', 'A25', 'A26', 'A27', 'A28', 'A29', 'A30', 'A31', 'A32', 'A33', 'A34', 'A35', 'A36', 'A37'], 
            ['1', '97.60', '95.70', '98.87', '85.05', '77.79', '79.43', '78.71', '73.49', '82.40', '84.69', '81.63', '80.99', '76.64', '76.63', '78.93', '82.82', '83.43', '75.52', '64.44', '70.16', '62.05', '79.14', '59.89', '85.80', '72.48', '43.50', '85.31', '61.93', '77.82', '68.23', '75.02', '86.22', '76.16', '87.80', '73.97', '88.79', '83.45'], 
            ['2', '0.84', '0.74', '0.22', '2.61', '4.95', '8.56', '10.65', '6.86', '5.89', '4.99', '1.73', '3.23', '1.26', '11.87', '6.29', '1.68', '2.34', '4.38', '5.35', '5.26', '7.53', '2.42', '30.44', '5.29', '9.16', '26.34', '5.20', '14.88', '2.84', '12.92', '7.02', '3.15', '1.64', '6.82', '6.52', '3.21', '3.62'], 
            ['3', '0.00', '0.00', '0.00', '3.80', '2.79', '4.06', '4.08', '3.78', '3.54', '3.78', '10.77', '5.39', '6.07', '8.13', '8.91', '3.46', '5.99', '3.46', '2.74', '24.58', '12.63', '16.62', '9.67', '8.91', '5.52', '27.13', '1.58', '2.16', '3.62', '2.34', '4.61', '5.81', '13.41', '5.38', '3.84', '4.95', '4.70'], 
            ['4', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00', '100.00']]

#Converse list from string to float and integer number
for i in range(1,len(veh_per_day)):
    for j in range(38):
        if j == 0:
            veh_per_day[i][j] = int(veh_per_day[i][j])
        else:
            veh_per_day[i][j]=float(veh_per_day[i][j])

for i in range(1,len(trip_per_day)):
    for j in range(38):
        if j == 0:
            trip_per_day[i][j] = int(trip_per_day[i][j])
        else:
            trip_per_day[i][j]=float(trip_per_day[i][j])

for i in range(1,len(pcu_per_day)):
    for j in range(38):
        if j == 0:
            pcu_per_day[i][j] = int(pcu_per_day[i][j])
        else:
            pcu_per_day[i][j]=float(pcu_per_day[i][j])

for i in range(1,len(allday_in)):
    for j in range(38):
        if j == 0:
            allday_in[i][j] = int(allday_in[i][j])
        else:
            allday_in[i][j]=float(allday_in[i][j])

for i in range(1,len(allday_out)):
    for j in range(38):
        if j == 0:
            allday_out[i][j] = int(allday_out[i][j])
        else:
            allday_out[i][j]=float(allday_out[i][j])

for i in range(1,len(am_peak)):
    for j in range(38):
        if j == 0:
            am_peak[i][j] = int(am_peak[i][j])
        else:
            am_peak[i][j]=float(am_peak[i][j])

for i in range(1,len(am_peak_in)):
    for j in range(38):
        if j == 0:
            am_peak_in[i][j] = int(am_peak_in[i][j])
        else:
            am_peak_in[i][j]=float(am_peak_in[i][j])

for i in range(1,len(am_peak_out)):
    for j in range(38):
        if j == 0:
            am_peak_out[i][j] = int(am_peak_out[i][j])
        else:
            am_peak_out[i][j]=float(am_peak_out[i][j])

for i in range(1,len(pm_peak)):
    for j in range(38):
        if j == 0:
            pm_peak[i][j] = int(pm_peak[i][j])
        else:
            pm_peak[i][j]=float(pm_peak[i][j])

for i in range(1,len(pm_peak_in)):
    for j in range(38):
        if j == 0:
            pm_peak_in[i][j] = int(pm_peak_in[i][j])
        else:
            pm_peak_in[i][j]=float(pm_peak_in[i][j])

for i in range(1,len(pm_peak_out)):
    for j in range(38):
        if j == 0:
            pm_peak_out[i][j] = int(pm_peak_out[i][j])
        else:
            pm_peak_out[i][j]=float(pm_peak_out[i][j])

for i in range(1,len(veh_mode)):
    for j in range(38):
        if j == 0:
            veh_mode[i][j] = int(veh_mode[i][j])
        else:
            veh_mode[i][j]=float(veh_mode[i][j])

#----------------------END TRIP GENERATION FUNCTION SECTION---------------------------------

#----------------------TRIP DISTRIBUTION FUNCTION SECTION----------------------------------

def tripdis_exp(tripend,travelcost,alpha,beta):
    #Calculate the willingness function
    willingness = []
    #Assign the zero to list
    for j in range(len(travelcost)):
        column = []
        for i in range(len(travelcost)):
            column.append(0)
        willingness.append(column)
    #Assign header
    for i in range(len(travelcost)):
        for j in range(len(travelcost[0])):
            if i==0:
                willingness[i][j] = travelcost[i][j]
    for i in range(1,len(travelcost)):
        willingness[i][0] = travelcost[i][0]
    #Assign the willingness
    for i in range(1,len(travelcost)):
        for j in range(1,len(travelcost[0])):
            willingness[i][j] = alpha/math.exp(beta*travelcost[i][j])

    #Loop Banlancing Matrix
    loop_count = True
    while loop_count:
        #Find Banlance Factor ai and bi
        #Set Zero list
        ai = []
        bj = []
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            ai.append(0)
            bj.append(0)
            sum_p.append(0)
            sum_a.append(0)

        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]

        for i in range(1,len(travelcost)):
            if tripend[i][1] !=0 or sum_p[i] !=0:
                ai[i] = tripend[i][1]/sum_p[i]
            else:
                ai[i] = 1

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*ai[i]

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_a[j]=sum_a[j]+willingness[i][j]

        for j in range(1,len(travelcost)):
            if tripend[j][2] != 0 or sum_a[j] != 0:
                bj[j] = tripend[j][2]/sum_a[j]
            else:
                bj[j] = 1

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*bj[j]

        #Set Total to Zero
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            sum_p.append(0)
            sum_a.append(0)
        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]
                sum_a[j]= sum_a[j]+willingness[i][j]
        #Check Error
        er_p = []
        er_a = []
        for i in range(len(travelcost)):
            er_p.append(0)
            er_a.append(0)

        for i in range(1,len(travelcost)):
            er_p[i] = abs(sum_p[i]-tripend[i][1])
            er_a[i] = abs(sum_a[i]-tripend[i][2])

        for i in range(1,len(travelcost)):
            if er_p[i] < 0.1 and er_a[i] < 0.1 :
                loop_count = False
                break
    
    #make header
    for i in range(0,len(travelcost)):
        for j in range(0,len(travelcost[0])):
            if i==0 or j==0:
                willingness[i][j] = travelcost[i][j]
            else:
                willingness[i][j] = math.trunc(willingness[i][j])
    
    willingness[0][0] = 'OD'

    return willingness

def tripdis_power(tripend,travelcost,alpha,beta):
    #Calculate the willingness function
    willingness = []
    #Assign the zero to list
    for j in range(len(travelcost)):
        column = []
        for i in range(len(travelcost)):
            column.append(0)
        willingness.append(column)
    #Assign header
    for i in range(len(travelcost)):
        for j in range(len(travelcost[0])):
            if i==0:
                willingness[i][j] = travelcost[i][j]
    for i in range(1,len(travelcost)):
        willingness[i][0] = travelcost[i][0]
    #Assign the willingness
    for i in range(1,len(travelcost)):
        for j in range(1,len(travelcost[0])):
            willingness[i][j] = alpha/math.pow(travelcost[i][j],beta)

    #Loop Banlancing Matrix
    loop_count = True
    while loop_count:
        #Find Banlance Factor ai and bi
        #Set Zero list
        ai = []
        bj = []
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            ai.append(0)
            bj.append(0)
            sum_p.append(0)
            sum_a.append(0)

        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]

        for i in range(1,len(travelcost)):
            if tripend[i][1] != 0 or sum_p[i] != 0:
                ai[i] = tripend[i][1]/sum_p[i]
            else:
                ai[i] = 1

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*ai[i]

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_a[j]=sum_a[j]+willingness[i][j]

        for j in range(1,len(travelcost)):
            if tripend[j][2] != 0 or sum_a[j] != 0:
                bj[j] = tripend[j][2]/sum_a[j]
            else:
                bj[j] = 1

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*bj[j]

        #Set Total to Zero
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            sum_p.append(0)
            sum_a.append(0)
        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]
                sum_a[j]= sum_a[j]+willingness[i][j]
        #Check Error
        er_p = []
        er_a = []
        for i in range(len(travelcost)):
            er_p.append(0)
            er_a.append(0)

        for i in range(1,len(travelcost)):
            er_p[i] = abs(sum_p[i]-tripend[i][1])
            er_a[i] = abs(sum_a[i]-tripend[i][2])

        for i in range(1,len(travelcost)):
            if er_p[i] < 0.1 and er_a[i] < 0.1 :
                loop_count = False
                break
    
    #make header
    for i in range(0,len(travelcost)):
        for j in range(0,len(travelcost[0])):
            if i==0 or j==0:
                willingness[i][j] = travelcost[i][j]
            else:
                willingness[i][j] = math.trunc(willingness[i][j])
    
    willingness[0][0] = 'OD'

    return willingness

#-------------------------------END OF TRIP DISTRIBUTION FUNCTION SECTION----------------------------

#-------------------------------METRIC ESTIMATION FUNCTION SECTION-----------------------------------


def tripdis_powerME(tripend,travelcost,alpha,beta):
    #Calculate the willingness function
    willingness = []
    #Assign the zero to list
    for j in range(len(travelcost)):
        column = []
        for i in range(len(travelcost)):
            column.append(0)
        willingness.append(column)
    #Assign header
    for i in range(len(travelcost)):
        for j in range(len(travelcost[0])):
            if i==0:
                willingness[i][j] = travelcost[i][j]
    for i in range(1,len(travelcost)):
        willingness[i][0] = travelcost[i][0]
    #Assign the willingness
    for i in range(1,len(travelcost)):
        for j in range(1,len(travelcost[0])):
            willingness[i][j] = alpha/math.pow(travelcost[i][j],beta)

    #Loop Banlancing Matrix
    n = 0
    while n<=10:
        #Find Banlance Factor ai and bi
        #Set Zero list
        ai = []
        bj = []
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            ai.append(0)
            bj.append(0)
            sum_p.append(0)
            sum_a.append(0)

        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]

        for i in range(1,len(travelcost)):
            if sum_p[i]!=0:
                ai[i] = tripend[i][1]/sum_p[i]

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*ai[i]

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_a[j]=sum_a[j]+willingness[i][j]

        #Error point
        for j in range(1,len(travelcost)):
            if sum_a[j]!=0:
                bj[j]=tripend[j][2]/sum_a[j]

        for i in range(1,len(travelcost)):
            for j in range(1,len(travelcost)):
                willingness[i][j]=willingness[i][j]*bj[j]

        #Set Total to Zero
        sum_p = []
        sum_a = []
        for i in range(len(travelcost)):
            sum_p.append(0)
            sum_a.append(0)
        for i in range (1,len(travelcost)):
            for j in range(1,len(travelcost)):
                sum_p[i] = sum_p[i]+willingness[i][j]
                sum_a[j]= sum_a[j]+willingness[i][j]
        
        n+=1
    
    return willingness


def calMSE(traffic):
    sum_error = 0
    n = 0
    for i in range(len(traffic)):
        if traffic[i][3]!=0:
            error = traffic[i][3]-traffic[i][4]
            sum_error = sum_error + error**2
            n += 1
    return (sum_error/n)

def clear_traffic(traffic):
    for i in range(len(traffic)):
        traffic[i][4] = 0
    return traffic

#------------------------------END OF METRIC ESTIMATION FUNCTION SECTION-------------------------------


#-----------------------CONTROL PAGES-----------------------------------------------------

app = Flask(__name__)

app.secret_key = "MyTranApp"

# Link to page section
# Get current path
path = os.getcwd()
# file Upload
DOWNLOAD_FOLDER = os.path.join(path, 'static/files')


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/home')
def home():
    return render_template('index.html')

@app.route('/tripgeninput')
def tripgeninput():
    return render_template('tripgeninput.html')

@app.route('/tripdisinput')
def tripdisinput():
    return render_template('tripdisinput.html')

@app.route('/tripassinput')
def tripassinput():
    return render_template('tripassinput.html')

@app.route('/throughinput')
def throughinput():
    return render_template('throughinput.html')

@app.route('/meinput')
def meinput():
    return render_template('meinput.html')

@app.route('/shortpathinput')
def shortpathinput():
    return render_template('shortpathinput.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/download')
def download():
    return render_template('download.html')

@app.route('/downloads/<path:filename>' ,methods=['GET', 'POST'])
def download_file(filename):
    return send_from_directory(DOWNLOAD_FOLDER, filename, as_attachment=True)
    
#-----------------------------------TRIP GENERATION MODULE---------------------------------


@app.route('/tripgenbuilding', methods=['GET','POST'])
def tripgenbuilding():

    if request.method == 'POST':
        
        f = request.files['csvFile']

        global bl_area
        bl_area = []

        # with open(str(f.read()),'r', encoding="utf8") as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         bl_area.append(row)
        # return f.readlines()[0]
        # csvfile = f.readlines();
        for line in f.readlines():
            bl_area.append(str(line.decode('utf-8')).replace('\r\n','').split(','))


        if len(bl_area[0]) != 38:
            flash("รูปแบบไฟล์ข้อมูลพื้นที่การใช้ประโยชน์อาคารไม่ถูกต้อง!!!", "error")
            return redirect(url_for('tripgeninput'))
        
        
        #converse header to string
        for i in range(len(bl_area)):
            for j in range(len(bl_area[0])):
                if i==0:
                    bl_area[i][j]=str(bl_area[i][j])

        #converse number of Zone to integer
        for i in range(1,len(bl_area)):
            bl_area[i][0] = int(bl_area[i][0])
        
        #converse area to unit of analysis
        for i in range(1,len(bl_area)):
            for j in range(1,len(bl_area[0])):
                if j<=7:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j==8:
                    bl_area[i][j] = float(bl_area[i][j])/50
                elif j<=10:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j==11:
                    bl_area[i][j] = float(bl_area[i][j])
                elif j<=13:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j<=19:
                    bl_area[i][j] = float(bl_area[i][j])
                elif j==20:
                    bl_area[i][j] = float(bl_area[i][j])/1600
                elif j<=22:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j<=28:
                    bl_area[i][j] = float(bl_area[i][j])
                elif j<=32:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j==33:
                    bl_area[i][j] = float(bl_area[i][j])
                elif j==34:
                    bl_area[i][j] = float(bl_area[i][j])/1000
                elif j<=36:
                    bl_area[i][j] = float(bl_area[i][j])
                else:
                    bl_area[i][j] = float(bl_area[i][j])/1000

        return render_template('tripgenbuilding.html', bl_area=bl_area)



@app.route('/tripgenoutput', methods=['GET','POST'])
def tripgenoutput():
    if request.method == 'POST':
        global trip_endin
        global trip_endout
        trip_endin = []
        trip_endout = []
        #Assign the zero to list
        for j in range(len(bl_area)):
            column = []
            for i in range(38):
                column.append(0)
            trip_endin.append(column)
        #Assign the zero to list
        for j in range(len(bl_area)):
            column = []
            for i in range(38):
                column.append(0)
            trip_endout.append(column)
        #Define the TAZ name
        for i in range(1,len(bl_area)):
            trip_endin[i][0] = bl_area[i][0]
        #Define the TAZ name
        for i in range(1,len(bl_area)):
            trip_endout[i][0] = bl_area[i][0]


        citytype = request.form['city_type']
        unit = request.form['unit']
        mode = request.form['mode']

        #Choose city type, period of time and unit
        if citytype=='1':
            if unit=='1':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]/100
            elif unit=='2':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]*trip_per_day[1][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]*trip_per_day[1][j]/100
            elif unit=='3':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[1][j]*pcu_per_day[1][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[1][j]*pcu_per_day[1][j]/100
            elif unit=='4':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
            elif unit=='5':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
            elif unit=='6':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*am_peak[1][j]*am_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*am_peak[1][j]*am_peak_out[1][j]/10000
            elif unit=='7':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
            elif unit=='8':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*trip_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
            else:
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*pm_peak[1][j]*pm_peak_in[1][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*pcu_per_day[1][j]*pm_peak[1][j]*pm_peak_out[1][j]/10000
        elif citytype=='2':
            if unit=='1':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]/100
            elif unit=='2':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]*trip_per_day[2][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]*trip_per_day[2][j]/100
            elif unit=='3':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_in[2][j]*pcu_per_day[2][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[1][j]*allday_out[2][j]*pcu_per_day[2][j]/100
            elif unit=='4':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*am_peak[2][j]*am_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*am_peak[2][j]*am_peak_out[2][j]/10000
            elif unit=='5':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[1][j]*am_peak[2][j]*am_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[1][j]*am_peak[2][j]*am_peak_out[2][j]/10000
            elif unit=='6':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*am_peak[1][j]*am_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*am_peak[1][j]*am_peak_out[2][j]/10000
            elif unit=='7':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pm_peak[2][j]*pm_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pm_peak[2][j]*pm_peak_out[2][j]/10000
            elif unit=='8':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[2][j]*pm_peak[2][j]*pm_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*trip_per_day[2][j]*pm_peak[2][j]*pm_peak_out[2][j]/10000
            else:
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*pm_peak[1][j]*pm_peak_in[2][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[2][j]*pcu_per_day[2][j]*pm_peak[1][j]*pm_peak_out[2][j]/10000
        elif citytype=='3':
            if unit=='1':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]/100
            elif unit=='2':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]*trip_per_day[3][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]*trip_per_day[3][j]/100
            elif unit=='3':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_in[3][j]*pcu_per_day[3][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*allday_out[3][j]*pcu_per_day[3][j]/100
            elif unit=='4':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
            elif unit=='5':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
            elif unit=='6':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*am_peak[3][j]*am_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*am_peak[3][j]*am_peak_out[3][j]/10000
            elif unit=='7':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
            elif unit=='8':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*trip_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
            else:
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*pm_peak[3][j]*pm_peak_in[3][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[3][j]*pcu_per_day[3][j]*pm_peak[3][j]*pm_peak_out[3][j]/10000
        elif citytype=='4':
            if unit=='1':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]/100
            elif unit=='2':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]*trip_per_day[4][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]*trip_per_day[4][j]/100
            elif unit=='3':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_in[4][j]*pcu_per_day[4][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*allday_out[4][j]*pcu_per_day[4][j]/100
            elif unit=='4':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
            elif unit=='5':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
            elif unit=='6':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*am_peak[4][j]*am_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*am_peak[4][j]*am_peak_out[4][j]/10000
            elif unit=='7':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
            elif unit=='8':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*trip_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
            else:
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*pm_peak[4][j]*pm_peak_in[4][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[4][j]*pcu_per_day[4][j]*pm_peak[4][j]*pm_peak_out[4][j]/10000
        else:
            if unit=='1':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]/100
            elif unit=='2':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]*trip_per_day[5][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]*trip_per_day[5][j]/100
            elif unit=='3':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_in[5][j]*pcu_per_day[5][j]/100
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*allday_out[5][j]*pcu_per_day[5][j]/100
            elif unit=='4':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
            elif unit=='5':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
            elif unit=='6':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*am_peak[5][j]*am_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*am_peak[5][j]*am_peak_out[5][j]/10000
            elif unit=='7':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
            elif unit=='8':
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*trip_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
            else:
                for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*pm_peak[5][j]*pm_peak_in[5][j]/10000
                        trip_endout[i][j]=bl_area[i][j]*veh_per_day[5][j]*pcu_per_day[5][j]*pm_peak[5][j]*pm_peak_out[5][j]/10000
        #mode of travel
        if mode=='1':
            for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=trip_endin[i][j]*veh_mode[1][j]/100
                        trip_endout[i][j]=trip_endout[i][j]*veh_mode[1][j]/100
        elif mode=='2':
            for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=trip_endin[i][j]*veh_mode[2][j]/100
                        trip_endout[i][j]=trip_endout[i][j]*veh_mode[2][j]/100
        elif mode=='3':
            for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=trip_endin[i][j]*veh_mode[3][j]/100
                        trip_endout[i][j]=trip_endout[i][j]*veh_mode[3][j]/100
        else:
            for i in range(1,len(bl_area)):
                    for j in range(1,38):
                        trip_endin[i][j]=trip_endin[i][j]*veh_mode[4][j]/100
                        trip_endout[i][j]=trip_endout[i][j]*veh_mode[4][j]/100
        
        global trip_endin_sum
        global trip_endout_sum
        trip_endin_sum = []
        trip_endout_sum = []
        #Assign the zero to list
        for j in range(len(bl_area)):
            column = []
            for i in range(2):
                column.append(0)
            trip_endin_sum.append(column)
        #Assign the zero to list
        for j in range(len(bl_area)):
            column = []
            for i in range(2):
                column.append(0)
            trip_endout_sum.append(column)
        #Define the TAZ name
        for i in range(1,len(bl_area)):
            trip_endin_sum[i][0] = bl_area[i][0]
        #Define the TAZ name
        for i in range(1,len(bl_area)):
            trip_endout_sum[i][0] = bl_area[i][0]
        #Calculate the trip end sum
        for i in range(1,len(bl_area)):
            for j in range(1,38):
                trip_endin_sum[i][1] = trip_endin_sum[i][1] + trip_endin[i][j]
                trip_endout_sum[i][1] = trip_endout_sum[i][1] + trip_endout[i][j]       
        #Calibrate the TP and TA
        sum_tp = 0
        sum_ta = 0
        for i in range(1,len(bl_area)):
            sum_tp = sum_tp + trip_endout_sum[i][1]
            sum_ta = sum_ta + trip_endin_sum[i][1]
        for i in range(1,len(bl_area)):
            trip_endin_sum[i][1]=trip_endin_sum[i][1]*sum_tp/sum_ta
        
        global tripend
        tripend = []
        #Assign the zero to list
        for j in range(len(bl_area)):
            column = []
            for i in range(3):
                column.append(0)
            tripend.append(column)
        #Assign trip end table
        for i in range(len(bl_area)):
            if i==0:
                tripend[i][0] = 'TAZ'
                tripend[i][1] = 'Trip Out'
                tripend[i][2] = 'Trip In'
            else:    
                tripend[i][0] = i
                tripend[i][1] = math.ceil(trip_endout_sum[i][1])
                tripend[i][2] = math.ceil(trip_endin_sum[i][1])

        global df_tripend       
        df_tripend = pd.DataFrame(tripend)


    return render_template('tripgenoutput.html',tripend=tripend)


@app.route('/exportTE',methods=['GET','POST'])
def exportTE():
    if request.method == 'POST':

        resp = make_response(df_tripend.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportTripEnd.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

#--------------------------------------END OF TRIPGENERATION MODULE--------------------------------------

#--------------------------------------TRIP DISTRIBUTION MODULE------------------------------------------

@app.route('/tripdisTE', methods=['GET','POST'])
def tripdisTE():

    if request.method == 'POST':

        f = request.files['csvTE']
        global trip_end01
        trip_end01 = []
        # with open(f) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         trip_end01.append(row)
        for line in f.readlines():
            trip_end01.append(str(line.decode('utf-8')).replace('\r\n','').split(','))

        #converse header to string
        for i in range(len(trip_end01)):
            for j in range(len(trip_end01[0])):
                if i==0:
                    trip_end01[i][j]=str(trip_end01[i][j])
        #converse number of Zone to integer
        for i in range(1,len(trip_end01)):
            trip_end01[i][0] = int(trip_end01[i][0])
        #converse area to unit of analysis
        for i in range(1,len(trip_end01)):
            for j in range(1,len(trip_end01[0])):
                    trip_end01[i][j] = float(trip_end01[i][j])

        return render_template('tripdisTE.html', trip_end01=trip_end01)

@app.route('/tripdisTC', methods=['GET','POST'])
def tripdisTC():

    if request.method == 'POST':

        c = request.files['csvTC']
        global travelcost
        travelcost = []
        # with open(c) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         travelcost.append(row)
        for line in c.readlines():
            travelcost.append(str(line.decode('utf-8')).replace('\r\n','').split(','))

        #converse header to string and zone to integer
        for i in range(len(travelcost)):
            for j in range(len(travelcost[0])):
                if i==0 or j==0:
                    travelcost[i][j]=str(travelcost[i][j])
                else:
                    travelcost[i][j]=float(travelcost[i][j])
        
        if (len(travelcost) != len(trip_end01)) or (len(travelcost[0]) != len(trip_end01)):
            flash("ข้อมูลการเกิดการเดินทางกับข้อมูลค่าใช้จ่ายการเดินทางไม่ตรงกัน!!!")
            return redirect(url_for('tripdisinput'))
        
        return render_template('tripdisTC.html', travelcost=travelcost)


@app.route('/tripdisDFTT', methods=['GET','POST'])
def tripdisDFTT():

    if request.method == 'POST':
        global od
        # Get function type from form
        func = request.form['function']
        if func == 'power':
            alpha = request.form['alpha']
            beta = request.form['beta']
            alpha = float(alpha)
            beta = float(beta)
            od = tripdis_power(trip_end01,travelcost,alpha,beta)
        elif func == 'exponential':
            alpha = request.form['alpha1']
            beta = request.form['beta1']
            alpha = float(alpha)
            beta = float(beta)
            od = tripdis_exp(trip_end01,travelcost,alpha,beta)

        global df_od       
        df_od = pd.DataFrame(od)        

        return render_template('tripdisDFTT.html', od=od)


@app.route('/exportDFTT',methods=['GET','POST'])
def exportDFTT():
    if request.method == 'POST':

        resp = make_response(df_od.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportTripTable.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

 
#-----------------------------------END OF TRIP DISTRIBUTION MODULE-----------------------------------------

#-----------------------------------TRIP ASSIGNMENT MODULE-------------------------------------------------

@app.route('/tripassignND', methods=['GET','POST'])
def tripassignND():
    if request.method == 'POST':

        n = request.files['csvNode']
        global graph_nodes
        graph_nodes = []
        # with open(n) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_nodes.append(row)
        for line in n.readlines():
            graph_nodes.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(graph_nodes)):
            for j in range(len(graph_nodes[0])):
                if i!=0:
                    graph_nodes[i][j]=int(graph_nodes[i][j])
                else:
                    graph_nodes[i][j]=str(graph_nodes[i][j])
        
        return render_template('tripassignND.html',graph_nodes=graph_nodes)

@app.route('/tripassignLK', methods=['GET','POST'])
def tripassignLK():
    if request.method == 'POST':

        f = request.files['csvLink']
        global graph_edges
        graph_edges = []
        for line in f.readlines():
            graph_edges.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        # with open(f) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_edges.append(row)
        
        for i in range(len(graph_edges)):
            for j in range(len(graph_edges[0])):
                if i!=0:
                    if j < 2:
                        graph_edges[i][j]=int(graph_edges[i][j])
                    else:
                        graph_edges[i][j]=float(graph_edges[i][j])
                else:
                    graph_edges[i][j]=str(graph_edges[i][j])
        
        return render_template('tripassignLK.html', graph_edges=graph_edges)

@app.route('/tripassignOD', methods=['GET','POST'])
def tripassignOD():

    if request.method == 'POST':

        d = request.files['csvOD']
        global od_trip
        od_trip = []
        # with open(d) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         od_trip.append(row)
        for line in d.readlines():
            od_trip.append(str(line.decode('utf-8')).replace('\r\n','').split(','))

        #converse header to string and zone to integer
        for i in range(len(od_trip)):
                for j in range(len(od_trip[0])):
                    if i==0 or j==0:
                        od_trip[i][j]=str(od_trip[i][j])
                    else:
                        od_trip[i][j]=int(od_trip[i][j])
        
        return render_template('tripassignOD.html', od_trip=od_trip)

@app.route('/tripassignTT', methods=['GET','POST'])
def tripassignTT():

    if request.method == 'POST':

        global traffic_on_link
        traffic_on_link = []
        #Assign the zero to list
        for j in range(len(graph_edges)):
            column = []
            for i in range(4):
                column.append(0)
            traffic_on_link.append(column)
        #Assign the traffic table
        for i in range(1,len(graph_edges)):
            for j in range(3):
                traffic_on_link[i][j] = graph_edges[i][j]

        global all_zone
        all_zone = len(od_trip)

        g = nx.DiGraph()
        for i in range(1,len(graph_nodes)):
            g.add_node(graph_nodes[i][0],pos=(graph_nodes[i][1],graph_nodes[i][2]))

        for i in range(1,len(graph_edges)):
            g.add_edge(graph_edges[i][0],graph_edges[i][1],weight=graph_edges[i][2])

        for i in range(1,all_zone):
            for j in range(1,all_zone):
                #Calculate shortest path
                sp = nx.dijkstra_path(g,source=i,target=j)
                #Assign Trip on link
                if i!=j:
                    for x in range(len(sp)-1):
                        for a in range(1,len(traffic_on_link)):
                            if traffic_on_link[a][0]==sp[x] and traffic_on_link[a][1]==sp[x+1]:
                                traffic_on_link[a][3]=traffic_on_link[a][3]+od_trip[i][j]
        
        traffic_on_link[0][0] = "A_NODE"
        traffic_on_link[0][1] = "B_NODE"
        traffic_on_link[0][2] = "DISTANCE"
        traffic_on_link[0][3] = "VOLUME"
        
        global df_traffic_on_link       
        df_traffic_on_link = pd.DataFrame(traffic_on_link)

        return render_template('tripassignTT.html', traffic_on_link=traffic_on_link)



@app.route('/exportTV',methods=['GET','POST'])
def exportTV():
    if request.method == 'POST':

        resp = make_response(df_traffic_on_link.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportTrafficVol.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp


#----------------------------------END OF TRIP ASSIGNMENT MODULE------------------------------------------------


#-------------------------------------EE AND IE/EI MODULE---------------------------------------------------


@app.route('/throughData',methods=['GET','POST'])
def throughData():
    if request.method == 'POST':
        
        t = request.files['csvFile']
        global thro
        thro = []
        # with open(t) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         thro.append(row)
        for line in t.readlines():
            thro.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(1,len(thro)):
            for j in range(len(thro[0])):
                if j<=1:
                    thro[i][j] = int(thro[i][j])
                elif j==2:
                    thro[i][j] = str(thro[i][j])
                else:
                    thro[i][j] = float(thro[i][j])
        
        return render_template('throughData.html',thro=thro)

@app.route('/throughIE',methods=['GET','POST'])
def throughIE():
    if request.method == 'POST':
        
        # IE and EI Trip Generation Section
        global ee
        ee = []
        #Assign the zero to list
        for j in range(len(thro)):
            column = []
            for i in range(7):
                column.append(0)
            ee.append(column)
        
        for j in range(7):
            if j==0:
                ee[0][j] = "STA"
            elif j==1:
                ee[0][j] = "ADT"
            elif j==2:
                ee[0][j] = "Percent Through"
            elif j==3:
                ee[0][j] = "Through(EE) Trips"
            elif j==4:
                ee[0][j] = "EI and IE Trips"
            elif j==5:
                ee[0][j] = "EI/IE Production"
            else:
                ee[0][j] = "EI/IE Attraction"
        
        for i in range(1,len(thro)):
            for j in range(7):
                if j==0:
                    ee[i][j] = thro[i][0]
                elif j==1:
                    ee[i][j] = math.ceil(thro[i][3])
                elif j==2:
                    if thro[i][1]==1:
                        ee[i][j] = round(76.76+11.22+(0.00012*thro[i][3])+(0.59*thro[i][4])-(0.48*thro[i][5])-(0.000417*thro[i][6]),2)
                        if ee[i][j]<0:
                            ee[i][j] = 0
                    elif thro[i][1]==2:
                        ee[i][j] = round(76.76-25.74+(0.00012*thro[i][3])+(0.59*thro[i][4])-(0.48*thro[i][5])-(0.000417*thro[i][6]),2)
                        if ee[i][j]<0:
                            ee[i][j] = 0
                    elif thro[i][1]==3:
                        ee[i][j] = round(76.76-42.18+(0.00012*thro[i][3])+(0.59*thro[i][4])-(0.48*thro[i][5])-(0.000417*thro[i][6]),2)
                        if ee[i][j]<0:
                            ee[i][j] = 0
                elif j==3:
                    ee[i][j] = math.ceil(ee[i][1]*ee[i][2]/100)
                elif j==4:
                    ee[i][j] = math.ceil(ee[i][1]-ee[i][3])
                elif j==5:
                    ee[i][j] = math.ceil(ee[i][4]/2)
                else:
                    ee[i][j] = math.ceil(ee[i][4]/2)
        
        global df_ee       
        df_ee = pd.DataFrame(ee)
        
        
        # Through Traffic section
        global through
        through = []

        #Assign Zero to list
        for j in range(len(thro)):
            column = []
            for i in range(len(thro)):
                column.append(0)
            through.append(column)
        #Assign header
        for i in range(len(thro)):
            for j in range(len(thro)):
                if i==0 :
                    through[0][j] = thro[j][0]
                elif j==0:
                    through[i][0] = thro[i][0]

        sum_adt = 0
        for i in range(1,len(thro)):
            sum_adt = sum_adt+thro[i][3]
        
        for i in range(1,len(thro)):
            for j in range(1,len(thro)):
                if i != j:
                    if thro[i][2] == thro[j][2]:
                        if thro[j][1] == 1:
                            through[i][j] = -2.70 + (0.21*ee[j][2]) + 67.86
                        elif thro[j][1] == 2:
                            through[i][j] = -7.40 + (0.55*ee[j][2]) + 24.68 + (45.62*thro[j][3]/sum_adt)
                        else:
                            through[i][j] = -0.63 + (86.68*thro[j][3]/sum_adt) + 30.04
                    else:
                        if thro[j][1] == 1:
                            through[i][j] = -2.70 + (0.21*ee[j][2])
                        elif thro[j][1] == 2:
                            through[i][j] = -7.40 + (0.55*ee[j][2]) + (45.62*thro[j][3]/sum_adt)
                        else:
                            through[i][j] = -0.63 + (86.68*thro[j][3]/sum_adt)
                else:
                    through[i][j] = 0
                

        #Assign Zero to list       
        sum_p = []
        for i in range(len(thro)):
            sum_p.append(0)
        #Summation of rows
        for i in range(1,len(thro)):
            for j in range(1,len(thro)):
                sum_p[i] = sum_p[i] + through[i][j]
        #Normalize percent of through trips
        for i in range(1,len(thro)):
            for j in range(1,len(thro)):
                if sum_p[i]!=0:
                    through[i][j] = through[i][j]*100/sum_p[i]
        
        #Initial through trip
        for i in range(1,len(thro)):
            for j in range(1,len(thro)):
                through[i][j] = through[i][j]*ee[i][3]/100
        
        #symmetrical
        for i in range(1,len(thro)):
            for j in range(1,len(thro)):
                if i<j:
                    through[i][j] = (through[i][j]+through[j][i])/2
                    through[j][i] = through[i][j]
        
        #Balance Through Trip
        for x in range(1000):

            #Set aj,bj,sum_p and sum_a list to zero
            ai = []
            bj = []
            sum_r = []
            sum_c = []
            for i in range(len(thro)):
                ai.append(0)
                bj.append(0)
                sum_r.append(0)
                sum_c.append(0)
            
            #Scale to the production
            for i in range (1,len(thro)):
                for j in range(1,len(thro)):
                    sum_r[i] = sum_r[i]+through[i][j]
            for i in range(1,len(thro)):
                if sum_r[i]!=0:
                    ai[i] = ee[i][3]/sum_r[i]
                else:
                    ai[i] = 1
            for i in range(1,len(thro)):
                for j in range(1,len(thro)):
                    through[i][j]=through[i][j]*ai[i]
            
            #Scale to the attraction
            for i in range(1,len(thro)):
                for j in range(1,len(thro)):
                    sum_c[j]=sum_c[j]+through[i][j]
            for j in range(1,len(thro)):
                if sum_c[j]!=0:
                    bj[j]=ee[j][3]/sum_c[j]
                else:
                    bj[j]=1
            for i in range(1,len(thro)):
                for j in range(1,len(thro)):
                    through[i][j]=math.trunc(through[i][j]*bj[j])

        global df_through       
        df_through = pd.DataFrame(through)

        return render_template('throughoutput.html', ee=ee, through=through)

@app.route('/exportETG',methods=['GET','POST'])
def exportETG():
    if request.method == 'POST':

        resp = make_response(df_ee.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportETG.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

@app.route('/exportETT',methods=['GET','POST'])
def exportETT():
    if request.method == 'POST':

        resp = make_response(df_through.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportETT.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

#---------------------------------------END OF EE, IE and EI MODULE------------------------------------------

#----------------------------------METRIC ESTIMATION MODULE-----------------------------------------------------

@app.route('/meND', methods=['GET','POST'])
def meND():
    if request.method == 'POST':

        n = request.files['csvNode']
        global graph_nodes
        graph_nodes = []
        # with open(n) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_nodes.append(row)        
        for line in n.readlines():
            graph_nodes.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(graph_nodes)):
            for j in range(len(graph_nodes[0])):
                if i!=0:
                    graph_nodes[i][j]=int(graph_nodes[i][j])
                else:
                    graph_nodes[i][j]=str(graph_nodes[i][j])
               
        return render_template('meND.html',graph_nodes=graph_nodes)

@app.route('/meLK', methods=['GET','POST'])
def meLK():
    if request.method == 'POST':

        f = request.files['csvLink']
        global graph_edges
        graph_edges = []
        # with open(f) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_edges.append(row)
        for line in f.readlines():
            graph_edges.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(graph_edges)):
            for j in range(len(graph_edges[0])):
                if i!=0:
                    if j < 2:
                        graph_edges[i][j]=int(graph_edges[i][j])
                    elif j==2:
                        graph_edges[i][j]=float(graph_edges[i][j])
                    else:
                        graph_edges[i][j]=int(graph_edges[i][j])
                else:
                    graph_edges[i][j]=str(graph_edges[i][j])
               
        return render_template('meLK.html', graph_edges=graph_edges)


@app.route('/meTE', methods=['GET','POST'])
def meTE():
    if request.method == 'POST':
        a = request.files['csvTE']
        global trip_end
        trip_end = []
        # with open(a) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         trip_end.append(row)
        for line in a.readlines():
            trip_end.append(str(line.decode('utf-8')).replace('\r\n','').split(','))

        #converse header to string
        for i in range(len(trip_end)):
            for j in range(len(trip_end[0])):
                if i==0:
                    trip_end[i][j]=str(trip_end[i][j])
                else:
                    trip_end[i][j]=int(trip_end[i][j])
            
        return render_template('meTE.html',trip_end=trip_end)


@app.route('/meTC', methods=['GET','POST'])
def meTC():
    if request.method == 'POST':
        b = request.files['csvTC']
        global travelcost
        travelcost = []
        # with open(b) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         travelcost.append(row)
        for line in b.readlines():
            travelcost.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(travelcost)):
            for j in range(len(travelcost[0])):
                if i==0 and j==0:
                    travelcost[i][j]=str(travelcost[i][j])
                elif i==0:
                    travelcost[i][j]=int(travelcost[i][j])
                elif j==0:
                    travelcost[i][j]=int(travelcost[i][j])
                else:
                    travelcost[i][j]=float(travelcost[i][j])
        
        if (len(travelcost) != len(trip_end)) or (len(travelcost[0]) != len(trip_end)):
            flash("ข้อมูลการเกิดการเดินทางกับข้อมูลค่าใช้จ่ายการเดินทางไม่ตรงกัน!!!")
            return redirect(url_for('meinput'))
        
        return render_template('meTC.html',travelcost=travelcost)


@app.route('/meBETA', methods=['GET','POST'])
def meBETA():
    if request.method == 'POST':

        #Converse the coordination system
        min = 9999999
        max = 0
        for i in range(1,len(graph_nodes)):
            if graph_nodes[i][1]<min:
                min = graph_nodes[i][1]

        for i in range(1,len(graph_nodes)):
            if graph_nodes[i][2]>max:
                max = graph_nodes[i][2]

        for i in range(1,len(graph_nodes)):
            graph_nodes[i][1]=graph_nodes[i][1]-min
            graph_nodes[i][2]=(max-graph_nodes[i][2])*-1

        #Build Network
        g = nx.DiGraph()
        for i in range(1,len(graph_nodes)):
            g.add_node(graph_nodes[i][0],pos=(graph_nodes[i][1],graph_nodes[i][2]))

        for i in range(1,len(graph_edges)):
            g.add_edge(graph_edges[i][0],graph_edges[i][1],weight=graph_edges[i][2])

        #Set Initial Traffic_on_Link
        global traffic_on_link
        traffic_on_link = []
        for j in range(len(graph_edges)):
            column = []
            for i in range(5):
                column.append(0)
            traffic_on_link.append(column)
        #Assign the traffic table
        for i in range(1,len(graph_edges)):
            for j in range(4):
                traffic_on_link[i][j] = graph_edges[i][j]

        global alpha
        #Get Data from form
        alpha = request.form['alpha']
        alpha = float(alpha)
        beta = request.form['beta']
        beta = float(beta)
        step = request.form['rate']
        step = float(step)
        iter1 = request.form['iter']
        iter1 = int(iter1)
        mse = []
        beta1 = []
        
        e = 1

        while e<=iter1:
            
            #Calculate beta
            od = tripdis_powerME(trip_end,travelcost,alpha,beta)
            for i in range(1,len(od)):
                for j in range(1,len(od[0])):
                    #Calculate shortest path
                    sp = nx.dijkstra_path(g,source=i,target=j)
                    #Assign Trip on link
                    if i!=j:
                        for x in range(len(sp)-1):
                            for a in range(1,len(traffic_on_link)):
                                if traffic_on_link[a][0]==sp[x] and traffic_on_link[a][1]==sp[x+1]:
                                    traffic_on_link[a][4]=traffic_on_link[a][4]+od[i][j]

            #calculate MSE of beta
            mse.append(calMSE(traffic_on_link))
            beta1.append(round(beta,3))
            #Clear predicted traffic
            traffic_on_link = clear_traffic(traffic_on_link)
            #Calculate beta+step
            od = tripdis_powerME(trip_end,travelcost,alpha,beta+step)
            for i in range(1,len(od)):
                for j in range(1,len(od[0])):
                    #Calculate shortest path
                    sp = nx.dijkstra_path(g,source=i,target=j)
                    #Assign Trip on link
                    if i!=j:
                        for x in range(len(sp)-1):
                            for a in range(1,len(traffic_on_link)):
                                if traffic_on_link[a][0]==sp[x] and traffic_on_link[a][1]==sp[x+1]:
                                    traffic_on_link[a][4]=traffic_on_link[a][4]+od[i][j]
            #Calculate MSE for beta + step
            mse_plus = calMSE(traffic_on_link)
            #Clear predicted traffic
            traffic_on_link = clear_traffic(traffic_on_link)
            #calculate beta - step
            od = tripdis_powerME(trip_end,travelcost,alpha,beta-step)
            for i in range(1,len(od)):
                for j in range(1,len(od[0])):
                    #Calculate shortest path
                    sp = nx.dijkstra_path(g,source=i,target=j)
                    #Assign Trip on link
                    if i!=j:
                        for x in range(len(sp)-1):
                            for a in range(1,len(traffic_on_link)):
                                if traffic_on_link[a][0]==sp[x] and traffic_on_link[a][1]==sp[x+1]:
                                    traffic_on_link[a][4]=traffic_on_link[a][4]+od[i][j]
            #Calculate MSE for beta - step
            mse_neg = calMSE(traffic_on_link)
            #Clear predicted traffic
            traffic_on_link = clear_traffic(traffic_on_link)

            if mse_plus < mse_neg:
                beta = beta + step
            elif mse_neg < mse_plus:
                beta = beta - step

            e = e + 1
        
        #Assign the optimum beta
        global betaopt
        betaopt = beta1[-1]
        
        #Calculate OD Table
        
        global odME
        odME = tripdis_powerME(trip_end,travelcost,alpha,betaopt)

        global df_odME       
        df_odME = pd.DataFrame(odME) 

        return render_template('meBETA.html',beta1=beta1, betaopt=betaopt, alpha=alpha, odME=odME)


@app.route('/exportODME',methods=['GET','POST'])
def exportODME():
    if request.method == 'POST':

        resp = make_response(df_odME.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportODME.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

#-------------------------------------END OF ME MODULE--------------------------------------------------


#----------------------------------------SHORTEST PATH MODULE----------------------------------------------------

@app.route('/shortpathND', methods=['GET','POST'])
def shortpathND():
    if request.method == 'POST':

        n = request.files['csvNode']
        global graph_nodes
        graph_nodes = []
        # with open(n) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_nodes.append(row)
        for line in n.readlines():
            graph_nodes.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(graph_nodes)):
            for j in range(len(graph_nodes[0])):
                if i!=0:
                    graph_nodes[i][j]=int(graph_nodes[i][j])
                else:
                    graph_nodes[i][j]=str(graph_nodes[i][j])
        
        return render_template('shortpathND.html',graph_nodes=graph_nodes)



@app.route('/shortpathLK', methods=['GET','POST'])
def shortpathLK():
    if request.method == 'POST':

        f = request.files['csvLink']
        global graph_edges
        graph_edges = []
        # with open(f) as file:
        #     csvfile = csv.reader(file)
        #     for row in csvfile:
        #         graph_edges.append(row)
        for line in f.readlines():
            graph_edges.append(str(line.decode('utf-8')).replace('\r\n','').split(','))
        
        for i in range(len(graph_edges)):
            for j in range(len(graph_edges[0])):
                if i!=0:
                    if j < 2:
                        graph_edges[i][j]=int(graph_edges[i][j])
                    else:
                        graph_edges[i][j]=float(graph_edges[i][j])
                else:
                    graph_edges[i][j]=str(graph_edges[i][j])
        
        return render_template('shortpathLK.html', graph_edges=graph_edges)


@app.route('/shortpathTT', methods=['GET','POST'])
def shortpathTT():
    if request.method == 'POST':
        #Get Data from form
        taz = request.form['TAZ1']
        taz = int(taz)
        all_zone = int(taz)+1
        coor = request.form['coor_sys1']

        #Converse the coordination system
        min = 9999999
        max = 0
        for i in range(1,len(graph_nodes)):
            if graph_nodes[i][1]<min:
                min = graph_nodes[i][1]

        for i in range(1,len(graph_nodes)):
            if graph_nodes[i][2]>max:
                max = graph_nodes[i][2]

        if coor=='1':
            for i in range(1,len(graph_nodes)):
                    graph_nodes[i][1]=graph_nodes[i][1]-min
                    graph_nodes[i][2]=(max-graph_nodes[i][2])*-1
            else:
                for i in range(1,len(graph_nodes)):
                    graph_nodes[i][1]=graph_nodes[i][1]-min
                    graph_nodes[i][2]=max-graph_nodes[i][2]
                    
        #Draw Network
        fig = plt.Figure(dpi=200)
        g = nx.DiGraph()
        for i in range(1,len(graph_nodes)):
            g.add_node(graph_nodes[i][0],pos=(graph_nodes[i][1],graph_nodes[i][2]))

        for i in range(1,len(graph_edges)):
            g.add_edge(graph_edges[i][0],graph_edges[i][1],weight=graph_edges[i][2])

        pos=nx.get_node_attributes(g,'pos')
        node_color=nx.get_node_attributes(g,'node_color')
        #arc_weight=nx.get_edge_attributes(g,'weight')

        node_color = ['red' if graph_nodes[i][0]<=taz else 'white' for i in range(1,len(graph_nodes))]
        ax=fig.gca()
        nx.draw(g,pos,with_labels=True,font_weight='bold',node_color = node_color,ax=ax,node_size=10,font_size=5,arrows=False)
        #nx.draw_networkx_edge_labels(g,pos,edge_labels=arc_weight)

        # Calculate Shortest Path
        global short_path
        short_path = []
        #Assign the zero to list
        for j in range(all_zone):
            column = []
            for i in range(all_zone):
                column.append(0)
            short_path.append(column)
        #Assign header
        short_path[0][0] = 'SP'
        for i in range(1,all_zone):
            short_path[i][0] = i
            short_path[0][i] = i
        #Build Network
        g1 = nx.DiGraph()
        for i in range(1,len(graph_nodes)):
            g1.add_node(graph_nodes[i][0],pos=(graph_nodes[i][1],graph_nodes[i][2]))

        for i in range(1,len(graph_edges)):
            g1.add_edge(graph_edges[i][0],graph_edges[i][1],weight=graph_edges[i][2])
        #Calculate shortest path
        for i in range(1,all_zone):
            for j in range(1,all_zone):
                short_path[i][j] = round(nx.dijkstra_path_length(g1,source= i ,target= j),3)
        
        global df_short_path       
        df_short_path = pd.DataFrame(short_path) 
        
        return render_template('shortpathTT.html',short_path=short_path,plot=mpld3.fig_to_html(fig))



@app.route('/exportSP',methods=['GET','POST'])
def exportSP():
    if request.method == 'POST':

        resp = make_response(df_short_path.to_csv(index=False,header=None))
        resp.headers["Content-Disposition"] = "attachment; filename=ExportSP.csv"
        resp.headers["Content-Type"] = "text/csv" 
        
        return resp

#---------------------------------END OF SHORTEST PATH MODULE---------------------------------------------------

if __name__=='__main__':
    app.run(debug=True)